{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport { TextStyle } from \"@shopify/polaris\";\n\nvar Index = function Index() {\n  return (\n    /*#__PURE__*/\n    function (_React$Component) {\n      _inherits(AutocompleteExample, _React$Component);\n\n      function AutocompleteExample() {\n        var _getPrototypeOf2;\n\n        var _this;\n\n        _classCallCheck(this, AutocompleteExample);\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AutocompleteExample)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n        _defineProperty(_assertThisInitialized(_this), \"options\", [{\n          value: 'rustic',\n          label: 'Rustic'\n        }, {\n          value: 'antique',\n          label: 'Antique'\n        }, {\n          value: 'vinyl',\n          label: 'Vinyl'\n        }, {\n          value: 'vintage',\n          label: 'Vintage'\n        }, {\n          value: 'refurbished',\n          label: 'Refurbished'\n        }]);\n\n        _defineProperty(_assertThisInitialized(_this), \"state\", {\n          selected: [],\n          inputText: '',\n          options: _this.options\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"updateText\", function (newValue) {\n          _this.setState({\n            inputText: newValue\n          });\n\n          _this.filterAndUpdateOptions(newValue);\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"filterAndUpdateOptions\", function (inputString) {\n          if (inputString === '') {\n            _this.setState({\n              options: _this.options\n            });\n\n            return;\n          }\n\n          var filterRegex = new RegExp(inputString, 'i');\n\n          var resultOptions = _this.options.filter(function (option) {\n            return option.label.match(filterRegex);\n          });\n\n          _this.setState({\n            options: resultOptions\n          });\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"updateSelection\", function (selected) {\n          var selectedText = selected.map(function (selectedItem) {\n            var matchedOption = _this.options.find(function (option) {\n              return option.value.match(selectedItem);\n            });\n\n            return matchedOption && matchedOption.label;\n          });\n\n          _this.setState({\n            selected: selected,\n            inputText: selectedText\n          });\n        });\n\n        return _this;\n      }\n\n      _createClass(AutocompleteExample, [{\n        key: \"render\",\n        value: function render() {\n          var textField = React.createElement(Autocomplete.TextField, {\n            onChange: this.updateText,\n            label: \"Tags\",\n            value: this.state.inputText,\n            prefix: React.createElement(Icon, {\n              source: \"search\",\n              color: \"inkLighter\"\n            }),\n            placeholder: \"Search\"\n          });\n          return React.createElement(\"div\", {\n            style: {\n              height: '225px'\n            }\n          }, React.createElement(Autocomplete, {\n            options: this.state.options,\n            selected: this.state.selected,\n            onSelect: this.updateSelection,\n            textField: textField\n          }));\n        }\n      }]);\n\n      return AutocompleteExample;\n    }(React.Component)\n  );\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/reggordon/src/github.com/Shopify/shopify_react_app/pages/index.js"],"names":["TextStyle","Index","value","label","selected","inputText","options","newValue","setState","filterAndUpdateOptions","inputString","filterRegex","RegExp","resultOptions","filter","option","match","selectedText","map","selectedItem","matchedOption","find","textField","updateText","state","height","updateSelection","React","Component"],"mappings":";;;;;;;;AACA,SAASA,SAAT,QAA0B,kBAA1B;;AACA,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,kEAEI,CACN;AAAEC,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,KAAK,EAAE;AAA1B,SADM,EAEN;AAAED,UAAAA,KAAK,EAAE,SAAT;AAAoBC,UAAAA,KAAK,EAAE;AAA3B,SAFM,EAGN;AAAED,UAAAA,KAAK,EAAE,OAAT;AAAkBC,UAAAA,KAAK,EAAE;AAAzB,SAHM,EAIN;AAAED,UAAAA,KAAK,EAAE,SAAT;AAAoBC,UAAAA,KAAK,EAAE;AAA3B,SAJM,EAKN;AAAED,UAAAA,KAAK,EAAE,aAAT;AAAwBC,UAAAA,KAAK,EAAE;AAA/B,SALM,CAFJ;;AAAA,gEAUE;AACJC,UAAAA,QAAQ,EAAE,EADN;AAEJC,UAAAA,SAAS,EAAE,EAFP;AAGJC,UAAAA,OAAO,EAAE,MAAKA;AAHV,SAVF;;AAAA,qEAsCO,UAACC,QAAD,EAAc;AACvB,gBAAKC,QAAL,CAAc;AAAEH,YAAAA,SAAS,EAAEE;AAAb,WAAd;;AACA,gBAAKE,sBAAL,CAA4BF,QAA5B;AACH,SAzCK;;AAAA,iFA2CmB,UAACG,WAAD,EAAiB;AACtC,cAAIA,WAAW,KAAK,EAApB,EAAwB;AACpB,kBAAKF,QAAL,CAAc;AACVF,cAAAA,OAAO,EAAE,MAAKA;AADJ,aAAd;;AAGA;AACH;;AAED,cAAMK,WAAW,GAAG,IAAIC,MAAJ,CAAWF,WAAX,EAAwB,GAAxB,CAApB;;AACA,cAAMG,aAAa,GAAG,MAAKP,OAAL,CAAaQ,MAAb,CAAoB,UAACC,MAAD;AAAA,mBACtCA,MAAM,CAACZ,KAAP,CAAaa,KAAb,CAAmBL,WAAnB,CADsC;AAAA,WAApB,CAAtB;;AAGA,gBAAKH,QAAL,CAAc;AACVF,YAAAA,OAAO,EAAEO;AADC,WAAd;AAGH,SA1DK;;AAAA,0EA4DY,UAACT,QAAD,EAAc;AAC5B,cAAMa,YAAY,GAAGb,QAAQ,CAACc,GAAT,CAAa,UAACC,YAAD,EAAkB;AAChD,gBAAMC,aAAa,GAAG,MAAKd,OAAL,CAAae,IAAb,CAAkB,UAACN,MAAD,EAAY;AAChD,qBAAOA,MAAM,CAACb,KAAP,CAAac,KAAb,CAAmBG,YAAnB,CAAP;AACH,aAFqB,CAAtB;;AAGA,mBAAOC,aAAa,IAAIA,aAAa,CAACjB,KAAtC;AACH,WALoB,CAArB;;AAMA,gBAAKK,QAAL,CAAc;AAAEJ,YAAAA,QAAQ,EAARA,QAAF;AAAYC,YAAAA,SAAS,EAAEY;AAAvB,WAAd;AACH,SApEK;;AAAA;AAAA;;AAAA;AAAA;AAAA,iCAgBG;AACL,cAAMK,SAAS,GACX,oBAAC,YAAD,CAAc,SAAd;AACI,YAAA,QAAQ,EAAE,KAAKC,UADnB;AAEI,YAAA,KAAK,EAAC,MAFV;AAGI,YAAA,KAAK,EAAE,KAAKC,KAAL,CAAWnB,SAHtB;AAII,YAAA,MAAM,EAAE,oBAAC,IAAD;AAAM,cAAA,MAAM,EAAC,QAAb;AAAsB,cAAA,KAAK,EAAC;AAA5B,cAJZ;AAKI,YAAA,WAAW,EAAC;AALhB,YADJ;AASA,iBACI;AAAK,YAAA,KAAK,EAAE;AAAEoB,cAAAA,MAAM,EAAE;AAAV;AAAZ,aACI,oBAAC,YAAD;AACI,YAAA,OAAO,EAAE,KAAKD,KAAL,CAAWlB,OADxB;AAEI,YAAA,QAAQ,EAAE,KAAKkB,KAAL,CAAWpB,QAFzB;AAGI,YAAA,QAAQ,EAAE,KAAKsB,eAHnB;AAII,YAAA,SAAS,EAAEJ;AAJf,YADJ,CADJ;AAUH;AApCK;;AAAA;AAAA,MACwBK,KAAK,CAACC,SAD9B;AAAA;AAAA,CAAd;;AAwEA,eAAe3B,KAAf","sourcesContent":["\nimport { TextStyle } from \"@shopify/polaris\";\nconst Index = () => (\n    class AutocompleteExample extends React.Component {\n        options = [\n            { value: 'rustic', label: 'Rustic' },\n            { value: 'antique', label: 'Antique' },\n            { value: 'vinyl', label: 'Vinyl' },\n            { value: 'vintage', label: 'Vintage' },\n            { value: 'refurbished', label: 'Refurbished' },\n        ];\n\n        state = {\n            selected: [],\n            inputText: '',\n            options: this.options,\n        };\n\n        render() {\n            const textField = (\n                <Autocomplete.TextField\n                    onChange={this.updateText}\n                    label=\"Tags\"\n                    value={this.state.inputText}\n                    prefix={<Icon source=\"search\" color=\"inkLighter\" />}\n                    placeholder=\"Search\"\n                />\n            );\n            return (\n                <div style={{ height: '225px' }}>\n                    <Autocomplete\n                        options={this.state.options}\n                        selected={this.state.selected}\n                        onSelect={this.updateSelection}\n                        textField={textField}\n                    />\n                </div>\n            );\n        }\n\n        updateText = (newValue) => {\n            this.setState({ inputText: newValue });\n            this.filterAndUpdateOptions(newValue);\n        };\n\n        filterAndUpdateOptions = (inputString) => {\n            if (inputString === '') {\n                this.setState({\n                    options: this.options,\n                });\n                return;\n            }\n\n            const filterRegex = new RegExp(inputString, 'i');\n            const resultOptions = this.options.filter((option) =>\n                option.label.match(filterRegex),\n            );\n            this.setState({\n                options: resultOptions,\n            });\n        };\n\n        updateSelection = (selected) => {\n            const selectedText = selected.map((selectedItem) => {\n                const matchedOption = this.options.find((option) => {\n                    return option.value.match(selectedItem);\n                });\n                return matchedOption && matchedOption.label;\n            });\n            this.setState({ selected, inputText: selectedText });\n        };\n    }\n);\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}