"use strict";
/**
 * @module Camera
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var helper_1 = require("../helper");
var types_1 = require("../types");
var types_2 = require("./types");
/**
 * Camera
 */
var Camera = /** @class */ (function (_super) {
    __extends(Camera, _super);
    function Camera(app, options) {
        return _super.call(this, app, types_1.Group.Camera, types_1.Group.Camera, options ? options.id : undefined) || this;
    }
    Camera.prototype.dispatch = function (action, payload) {
        switch (action) {
            case types_2.Action.CAPTURE:
                this.dispatchCameraAction(types_2.ActionType.CAPTURE, payload);
                break;
            case types_2.Action.OPEN:
                this.dispatchCameraAction(types_2.ActionType.OPEN, payload);
                break;
        }
        return this;
    };
    Camera.prototype.dispatchCameraAction = function (type, payload) {
        this.app.dispatch(helper_1.actionWrapper({
            type: type,
            group: types_1.Group.Camera,
            payload: __assign({}, (payload || {}), { id: this.id }),
        }));
    };
    return Camera;
}(helper_1.ActionSet));
exports.Camera = Camera;
function create(app, options) {
    return new Camera(app, options);
}
exports.create = create;
